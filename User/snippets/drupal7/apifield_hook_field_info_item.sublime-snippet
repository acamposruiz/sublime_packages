<snippet>
	<content><![CDATA[
\$field = array(
  'label' => '${1:value}', // The human-readable name of the field type.
  'description' => '${2:value}', // A short description for the field type.
  'settings' => array(${3:'max_length' => 255}), // An array whose keys are the names of the settings available for the field type, and whose values are the default values for those settings.
  'instance_settings' => array(${4:'text_processing' => 0}), //  An array whose keys are the names of the settings available for instances of the field type, and whose values are the default values for those settings. Instance-level settings can have different values on each field instance, and thus allow greater flexibility than field-level settings. It is recommended to put settings at the instance level whenever possible. Notable exceptions: settings acting on the schema definition, or settings that Views needs to use across field instances (for example, the list of allowed values).
  'default_widget' => '${5:text_textfield}', //The machine name of the default widget to be used by instances of this field type, when no widget is specified in the instance definition. This widget must be available whenever the field type is available (i.e. provided by the field type module, or by a module the field type module depends on).
  'default_formatter' => '${6:text_default}', // The machine name of the default formatter to be used by instances of this field type, when no formatter is specified in the instance definition. This formatter must be available whenever the field type is available (i.e. provided by the field type module, or by a module the field type module depends on).
  'no_ui' => ${6:TRUE - FALSE} // (optional) A boolean specifying that users should not be allowed to create fields and instances of this field type through the UI. Such fields can only be created programmatically with field_create_field() and field_create_instance(). Defaults to FALSE.
);
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<!-- <tabTrigger>hello</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
	<tabTrigger>dr7_fielditem</tabTrigger>
	<description>Field info item</description>
</snippet>
